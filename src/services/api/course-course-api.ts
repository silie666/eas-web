/* tslint:disable */
/* eslint-disable */
/**
 * 学校
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CourseCourse } from '../model';
// @ts-ignore
import { CourseCourse1 } from '../model';
// @ts-ignore
import { CourseCourseBill } from '../model';
// @ts-ignore
import { PatchApiStudentApiCourseBillPayRequest } from '../model';
// @ts-ignore
import { PatchApiTeacherApiCourseRequest } from '../model';
/**
 * CourseCourseApi - axios parameter creator
 * @export
 */
export const CourseCourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 课程-课程管理-课程删除
         * @param {number} courseId 
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiTeacherApiCourse: async (courseId: number, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('deleteApiTeacherApiCourse', 'courseId', courseId)
            const localVarPath = `/api/teacher-api/courses/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 账单-账单管理-账单列表
         * @param {number} [page] 页数，默认1
         * @param {number} [perPage] 每页条数，默认15，最大200
         * @param {number} [payStatus] 账单状态
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStudentApiCourseBills: async (page?: number, perPage?: number, payStatus?: number, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/student-api/course-bills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (payStatus !== undefined) {
                localVarQueryParameter['pay_status'] = payStatus;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 课程-课程管理-课程列表
         * @param {number} [page] 页数，默认1
         * @param {number} [perPage] 每页条数，默认15，最大200
         * @param {string} [courseName] 课程名称
         * @param {string} [courseDate] 上课日期
         * @param {number} [billFees] 账单费用
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStudentApiCourses: async (page?: number, perPage?: number, courseName?: string, courseDate?: string, billFees?: number, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/student-api/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (courseName !== undefined) {
                localVarQueryParameter['course_name'] = courseName;
            }

            if (courseDate !== undefined) {
                localVarQueryParameter['course_date'] = courseDate;
            }

            if (billFees !== undefined) {
                localVarQueryParameter['bill_fees'] = billFees;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 课程-课程管理-课程详情
         * @param {number} courseId 
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTeacherApiCourse: async (courseId: number, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('getApiTeacherApiCourse', 'courseId', courseId)
            const localVarPath = `/api/teacher-api/courses/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 课程-课程管理-课程列表
         * @param {number} [page] 页数，默认1
         * @param {number} [perPage] 每页条数，默认15，最大200
         * @param {string} [name] 课程名称
         * @param {string} [date] 上课日期
         * @param {number} [fees] 课程费用
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTeacherApiCourses: async (page?: number, perPage?: number, name?: string, date?: string, fees?: number, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teacher-api/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (fees !== undefined) {
                localVarQueryParameter['fees'] = fees;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 账单-账单管理-账单支付
         * @param {string} courseBillId 
         * @param {string} [authorization] 授权
         * @param {PatchApiStudentApiCourseBillPayRequest} [patchApiStudentApiCourseBillPayRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiStudentApiCourseBillPay: async (courseBillId: string, authorization?: string, patchApiStudentApiCourseBillPayRequest?: PatchApiStudentApiCourseBillPayRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseBillId' is not null or undefined
            assertParamExists('patchApiStudentApiCourseBillPay', 'courseBillId', courseBillId)
            const localVarPath = `/api/student-api/course-bills/{courseBillId}/pay`
                .replace(`{${"courseBillId"}}`, encodeURIComponent(String(courseBillId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchApiStudentApiCourseBillPayRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 课程-课程管理-课程更新
         * @param {string} courseId 
         * @param {string} [authorization] 授权
         * @param {PatchApiTeacherApiCourseRequest} [patchApiTeacherApiCourseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiTeacherApiCourse: async (courseId: string, authorization?: string, patchApiTeacherApiCourseRequest?: PatchApiTeacherApiCourseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('patchApiTeacherApiCourse', 'courseId', courseId)
            const localVarPath = `/api/teacher-api/courses/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchApiTeacherApiCourseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 课程-课程管理-课程添加
         * @param {string} [authorization] 授权
         * @param {PatchApiTeacherApiCourseRequest} [patchApiTeacherApiCourseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTeacherApiCourses: async (authorization?: string, patchApiTeacherApiCourseRequest?: PatchApiTeacherApiCourseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teacher-api/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchApiTeacherApiCourseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseCourseApi - functional programming interface
 * @export
 */
export const CourseCourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseCourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 课程-课程管理-课程删除
         * @param {number} courseId 
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiTeacherApiCourse(courseId: number, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiTeacherApiCourse(courseId, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseApi.deleteApiTeacherApiCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 账单-账单管理-账单列表
         * @param {number} [page] 页数，默认1
         * @param {number} [perPage] 每页条数，默认15，最大200
         * @param {number} [payStatus] 账单状态
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiStudentApiCourseBills(page?: number, perPage?: number, payStatus?: number, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseCourseBill>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiStudentApiCourseBills(page, perPage, payStatus, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseApi.getApiStudentApiCourseBills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 课程-课程管理-课程列表
         * @param {number} [page] 页数，默认1
         * @param {number} [perPage] 每页条数，默认15，最大200
         * @param {string} [courseName] 课程名称
         * @param {string} [courseDate] 上课日期
         * @param {number} [billFees] 账单费用
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiStudentApiCourses(page?: number, perPage?: number, courseName?: string, courseDate?: string, billFees?: number, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseCourse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiStudentApiCourses(page, perPage, courseName, courseDate, billFees, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseApi.getApiStudentApiCourses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 课程-课程管理-课程详情
         * @param {number} courseId 
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiTeacherApiCourse(courseId: number, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCourse1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiTeacherApiCourse(courseId, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseApi.getApiTeacherApiCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 课程-课程管理-课程列表
         * @param {number} [page] 页数，默认1
         * @param {number} [perPage] 每页条数，默认15，最大200
         * @param {string} [name] 课程名称
         * @param {string} [date] 上课日期
         * @param {number} [fees] 课程费用
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiTeacherApiCourses(page?: number, perPage?: number, name?: string, date?: string, fees?: number, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseCourse1>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiTeacherApiCourses(page, perPage, name, date, fees, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseApi.getApiTeacherApiCourses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 账单-账单管理-账单支付
         * @param {string} courseBillId 
         * @param {string} [authorization] 授权
         * @param {PatchApiStudentApiCourseBillPayRequest} [patchApiStudentApiCourseBillPayRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiStudentApiCourseBillPay(courseBillId: string, authorization?: string, patchApiStudentApiCourseBillPayRequest?: PatchApiStudentApiCourseBillPayRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiStudentApiCourseBillPay(courseBillId, authorization, patchApiStudentApiCourseBillPayRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseApi.patchApiStudentApiCourseBillPay']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 课程-课程管理-课程更新
         * @param {string} courseId 
         * @param {string} [authorization] 授权
         * @param {PatchApiTeacherApiCourseRequest} [patchApiTeacherApiCourseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiTeacherApiCourse(courseId: string, authorization?: string, patchApiTeacherApiCourseRequest?: PatchApiTeacherApiCourseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCourse1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiTeacherApiCourse(courseId, authorization, patchApiTeacherApiCourseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseApi.patchApiTeacherApiCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 课程-课程管理-课程添加
         * @param {string} [authorization] 授权
         * @param {PatchApiTeacherApiCourseRequest} [patchApiTeacherApiCourseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTeacherApiCourses(authorization?: string, patchApiTeacherApiCourseRequest?: PatchApiTeacherApiCourseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCourse1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTeacherApiCourses(authorization, patchApiTeacherApiCourseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseApi.postApiTeacherApiCourses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseCourseApi - factory interface
 * @export
 */
export const CourseCourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseCourseApiFp(configuration)
    return {
        /**
         * 
         * @summary 课程-课程管理-课程删除
         * @param {CourseCourseApiDeleteApiTeacherApiCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiTeacherApiCourse(requestParameters: CourseCourseApiDeleteApiTeacherApiCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteApiTeacherApiCourse(requestParameters.courseId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 账单-账单管理-账单列表
         * @param {CourseCourseApiGetApiStudentApiCourseBillsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStudentApiCourseBills(requestParameters: CourseCourseApiGetApiStudentApiCourseBillsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseCourseBill>> {
            return localVarFp.getApiStudentApiCourseBills(requestParameters.page, requestParameters.perPage, requestParameters.payStatus, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 课程-课程管理-课程列表
         * @param {CourseCourseApiGetApiStudentApiCoursesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStudentApiCourses(requestParameters: CourseCourseApiGetApiStudentApiCoursesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseCourse>> {
            return localVarFp.getApiStudentApiCourses(requestParameters.page, requestParameters.perPage, requestParameters.courseName, requestParameters.courseDate, requestParameters.billFees, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 课程-课程管理-课程详情
         * @param {CourseCourseApiGetApiTeacherApiCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTeacherApiCourse(requestParameters: CourseCourseApiGetApiTeacherApiCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CourseCourse1> {
            return localVarFp.getApiTeacherApiCourse(requestParameters.courseId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 课程-课程管理-课程列表
         * @param {CourseCourseApiGetApiTeacherApiCoursesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTeacherApiCourses(requestParameters: CourseCourseApiGetApiTeacherApiCoursesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseCourse1>> {
            return localVarFp.getApiTeacherApiCourses(requestParameters.page, requestParameters.perPage, requestParameters.name, requestParameters.date, requestParameters.fees, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 账单-账单管理-账单支付
         * @param {CourseCourseApiPatchApiStudentApiCourseBillPayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiStudentApiCourseBillPay(requestParameters: CourseCourseApiPatchApiStudentApiCourseBillPayRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.patchApiStudentApiCourseBillPay(requestParameters.courseBillId, requestParameters.authorization, requestParameters.patchApiStudentApiCourseBillPayRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 课程-课程管理-课程更新
         * @param {CourseCourseApiPatchApiTeacherApiCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiTeacherApiCourse(requestParameters: CourseCourseApiPatchApiTeacherApiCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CourseCourse1> {
            return localVarFp.patchApiTeacherApiCourse(requestParameters.courseId, requestParameters.authorization, requestParameters.patchApiTeacherApiCourseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 课程-课程管理-课程添加
         * @param {CourseCourseApiPostApiTeacherApiCoursesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTeacherApiCourses(requestParameters: CourseCourseApiPostApiTeacherApiCoursesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CourseCourse1> {
            return localVarFp.postApiTeacherApiCourses(requestParameters.authorization, requestParameters.patchApiTeacherApiCourseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteApiTeacherApiCourse operation in CourseCourseApi.
 * @export
 * @interface CourseCourseApiDeleteApiTeacherApiCourseRequest
 */
export interface CourseCourseApiDeleteApiTeacherApiCourseRequest {
    /**
     * 
     * @type {number}
     * @memberof CourseCourseApiDeleteApiTeacherApiCourse
     */
    readonly courseId: number

    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseApiDeleteApiTeacherApiCourse
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiStudentApiCourseBills operation in CourseCourseApi.
 * @export
 * @interface CourseCourseApiGetApiStudentApiCourseBillsRequest
 */
export interface CourseCourseApiGetApiStudentApiCourseBillsRequest {
    /**
     * 页数，默认1
     * @type {number}
     * @memberof CourseCourseApiGetApiStudentApiCourseBills
     */
    readonly page?: number

    /**
     * 每页条数，默认15，最大200
     * @type {number}
     * @memberof CourseCourseApiGetApiStudentApiCourseBills
     */
    readonly perPage?: number

    /**
     * 账单状态
     * @type {number}
     * @memberof CourseCourseApiGetApiStudentApiCourseBills
     */
    readonly payStatus?: number

    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseApiGetApiStudentApiCourseBills
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiStudentApiCourses operation in CourseCourseApi.
 * @export
 * @interface CourseCourseApiGetApiStudentApiCoursesRequest
 */
export interface CourseCourseApiGetApiStudentApiCoursesRequest {
    /**
     * 页数，默认1
     * @type {number}
     * @memberof CourseCourseApiGetApiStudentApiCourses
     */
    readonly page?: number

    /**
     * 每页条数，默认15，最大200
     * @type {number}
     * @memberof CourseCourseApiGetApiStudentApiCourses
     */
    readonly perPage?: number

    /**
     * 课程名称
     * @type {string}
     * @memberof CourseCourseApiGetApiStudentApiCourses
     */
    readonly courseName?: string

    /**
     * 上课日期
     * @type {string}
     * @memberof CourseCourseApiGetApiStudentApiCourses
     */
    readonly courseDate?: string

    /**
     * 账单费用
     * @type {number}
     * @memberof CourseCourseApiGetApiStudentApiCourses
     */
    readonly billFees?: number

    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseApiGetApiStudentApiCourses
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiTeacherApiCourse operation in CourseCourseApi.
 * @export
 * @interface CourseCourseApiGetApiTeacherApiCourseRequest
 */
export interface CourseCourseApiGetApiTeacherApiCourseRequest {
    /**
     * 
     * @type {number}
     * @memberof CourseCourseApiGetApiTeacherApiCourse
     */
    readonly courseId: number

    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseApiGetApiTeacherApiCourse
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiTeacherApiCourses operation in CourseCourseApi.
 * @export
 * @interface CourseCourseApiGetApiTeacherApiCoursesRequest
 */
export interface CourseCourseApiGetApiTeacherApiCoursesRequest {
    /**
     * 页数，默认1
     * @type {number}
     * @memberof CourseCourseApiGetApiTeacherApiCourses
     */
    readonly page?: number

    /**
     * 每页条数，默认15，最大200
     * @type {number}
     * @memberof CourseCourseApiGetApiTeacherApiCourses
     */
    readonly perPage?: number

    /**
     * 课程名称
     * @type {string}
     * @memberof CourseCourseApiGetApiTeacherApiCourses
     */
    readonly name?: string

    /**
     * 上课日期
     * @type {string}
     * @memberof CourseCourseApiGetApiTeacherApiCourses
     */
    readonly date?: string

    /**
     * 课程费用
     * @type {number}
     * @memberof CourseCourseApiGetApiTeacherApiCourses
     */
    readonly fees?: number

    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseApiGetApiTeacherApiCourses
     */
    readonly authorization?: string
}

/**
 * Request parameters for patchApiStudentApiCourseBillPay operation in CourseCourseApi.
 * @export
 * @interface CourseCourseApiPatchApiStudentApiCourseBillPayRequest
 */
export interface CourseCourseApiPatchApiStudentApiCourseBillPayRequest {
    /**
     * 
     * @type {string}
     * @memberof CourseCourseApiPatchApiStudentApiCourseBillPay
     */
    readonly courseBillId: string

    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseApiPatchApiStudentApiCourseBillPay
     */
    readonly authorization?: string

    /**
     * 
     * @type {PatchApiStudentApiCourseBillPayRequest}
     * @memberof CourseCourseApiPatchApiStudentApiCourseBillPay
     */
    readonly patchApiStudentApiCourseBillPayRequest?: PatchApiStudentApiCourseBillPayRequest
}

/**
 * Request parameters for patchApiTeacherApiCourse operation in CourseCourseApi.
 * @export
 * @interface CourseCourseApiPatchApiTeacherApiCourseRequest
 */
export interface CourseCourseApiPatchApiTeacherApiCourseRequest {
    /**
     * 
     * @type {string}
     * @memberof CourseCourseApiPatchApiTeacherApiCourse
     */
    readonly courseId: string

    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseApiPatchApiTeacherApiCourse
     */
    readonly authorization?: string

    /**
     * 
     * @type {PatchApiTeacherApiCourseRequest}
     * @memberof CourseCourseApiPatchApiTeacherApiCourse
     */
    readonly patchApiTeacherApiCourseRequest?: PatchApiTeacherApiCourseRequest
}

/**
 * Request parameters for postApiTeacherApiCourses operation in CourseCourseApi.
 * @export
 * @interface CourseCourseApiPostApiTeacherApiCoursesRequest
 */
export interface CourseCourseApiPostApiTeacherApiCoursesRequest {
    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseApiPostApiTeacherApiCourses
     */
    readonly authorization?: string

    /**
     * 
     * @type {PatchApiTeacherApiCourseRequest}
     * @memberof CourseCourseApiPostApiTeacherApiCourses
     */
    readonly patchApiTeacherApiCourseRequest?: PatchApiTeacherApiCourseRequest
}

/**
 * CourseCourseApi - object-oriented interface
 * @export
 * @class CourseCourseApi
 * @extends {BaseAPI}
 */
export class CourseCourseApi extends BaseAPI {
    /**
     * 
     * @summary 课程-课程管理-课程删除
     * @param {CourseCourseApiDeleteApiTeacherApiCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseApi
     */
    public deleteApiTeacherApiCourse(requestParameters: CourseCourseApiDeleteApiTeacherApiCourseRequest, options?: RawAxiosRequestConfig) {
        return CourseCourseApiFp(this.configuration).deleteApiTeacherApiCourse(requestParameters.courseId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 账单-账单管理-账单列表
     * @param {CourseCourseApiGetApiStudentApiCourseBillsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseApi
     */
    public getApiStudentApiCourseBills(requestParameters: CourseCourseApiGetApiStudentApiCourseBillsRequest = {}, options?: RawAxiosRequestConfig) {
        return CourseCourseApiFp(this.configuration).getApiStudentApiCourseBills(requestParameters.page, requestParameters.perPage, requestParameters.payStatus, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 课程-课程管理-课程列表
     * @param {CourseCourseApiGetApiStudentApiCoursesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseApi
     */
    public getApiStudentApiCourses(requestParameters: CourseCourseApiGetApiStudentApiCoursesRequest = {}, options?: RawAxiosRequestConfig) {
        return CourseCourseApiFp(this.configuration).getApiStudentApiCourses(requestParameters.page, requestParameters.perPage, requestParameters.courseName, requestParameters.courseDate, requestParameters.billFees, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 课程-课程管理-课程详情
     * @param {CourseCourseApiGetApiTeacherApiCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseApi
     */
    public getApiTeacherApiCourse(requestParameters: CourseCourseApiGetApiTeacherApiCourseRequest, options?: RawAxiosRequestConfig) {
        return CourseCourseApiFp(this.configuration).getApiTeacherApiCourse(requestParameters.courseId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 课程-课程管理-课程列表
     * @param {CourseCourseApiGetApiTeacherApiCoursesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseApi
     */
    public getApiTeacherApiCourses(requestParameters: CourseCourseApiGetApiTeacherApiCoursesRequest = {}, options?: RawAxiosRequestConfig) {
        return CourseCourseApiFp(this.configuration).getApiTeacherApiCourses(requestParameters.page, requestParameters.perPage, requestParameters.name, requestParameters.date, requestParameters.fees, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 账单-账单管理-账单支付
     * @param {CourseCourseApiPatchApiStudentApiCourseBillPayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseApi
     */
    public patchApiStudentApiCourseBillPay(requestParameters: CourseCourseApiPatchApiStudentApiCourseBillPayRequest, options?: RawAxiosRequestConfig) {
        return CourseCourseApiFp(this.configuration).patchApiStudentApiCourseBillPay(requestParameters.courseBillId, requestParameters.authorization, requestParameters.patchApiStudentApiCourseBillPayRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 课程-课程管理-课程更新
     * @param {CourseCourseApiPatchApiTeacherApiCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseApi
     */
    public patchApiTeacherApiCourse(requestParameters: CourseCourseApiPatchApiTeacherApiCourseRequest, options?: RawAxiosRequestConfig) {
        return CourseCourseApiFp(this.configuration).patchApiTeacherApiCourse(requestParameters.courseId, requestParameters.authorization, requestParameters.patchApiTeacherApiCourseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 课程-课程管理-课程添加
     * @param {CourseCourseApiPostApiTeacherApiCoursesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseApi
     */
    public postApiTeacherApiCourses(requestParameters: CourseCourseApiPostApiTeacherApiCoursesRequest = {}, options?: RawAxiosRequestConfig) {
        return CourseCourseApiFp(this.configuration).postApiTeacherApiCourses(requestParameters.authorization, requestParameters.patchApiTeacherApiCourseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

