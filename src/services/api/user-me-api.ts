/* tslint:disable */
/* eslint-disable */
/**
 * 学校
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { PatchApiCommonApiMeRequest } from '../model';
// @ts-ignore
import { PostApiStudentApiMeCardsRequest } from '../model';
// @ts-ignore
import { UserUser } from '../model';
// @ts-ignore
import { UserUserCard } from '../model';
// @ts-ignore
import { UserUserNode } from '../model';
/**
 * UserMeApi - axios parameter creator
 * @export
 */
export const UserMeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除信用卡
         * @param {number} cardId 
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiStudentApiMeCard: async (cardId: number, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteApiStudentApiMeCard', 'cardId', cardId)
            const localVarPath = `/api/student-api/me-cards/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 我的资料
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCommonApiMe: async (authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/common-api/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 我的节点列表
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCommonApiNodes: async (authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/common-api/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 信用卡列表
         * @param {number} [page] 页数，默认1
         * @param {number} [perPage] 每页条数，默认15，最大200
         * @param {string} [number] 卡号
         * @param {string} [withAll] 获取所有数据
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStudentApiMeCards: async (page?: number, perPage?: number, number?: string, withAll?: string, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/student-api/me-cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (withAll !== undefined) {
                localVarQueryParameter['with_all'] = withAll;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新我的资料
         * @param {string} [authorization] 授权
         * @param {PatchApiCommonApiMeRequest} [patchApiCommonApiMeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiCommonApiMe: async (authorization?: string, patchApiCommonApiMeRequest?: PatchApiCommonApiMeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/common-api/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchApiCommonApiMeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新信用卡
         * @param {string} cardId 
         * @param {string} [authorization] 授权
         * @param {PostApiStudentApiMeCardsRequest} [postApiStudentApiMeCardsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiStudentApiMeCard: async (cardId: string, authorization?: string, postApiStudentApiMeCardsRequest?: PostApiStudentApiMeCardsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('patchApiStudentApiMeCard', 'cardId', cardId)
            const localVarPath = `/api/student-api/me-cards/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiStudentApiMeCardsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建信用卡
         * @param {string} [authorization] 授权
         * @param {PostApiStudentApiMeCardsRequest} [postApiStudentApiMeCardsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStudentApiMeCards: async (authorization?: string, postApiStudentApiMeCardsRequest?: PostApiStudentApiMeCardsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/student-api/me-cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiStudentApiMeCardsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserMeApi - functional programming interface
 * @export
 */
export const UserMeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserMeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 删除信用卡
         * @param {number} cardId 
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiStudentApiMeCard(cardId: number, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiStudentApiMeCard(cardId, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserMeApi.deleteApiStudentApiMeCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 我的资料
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCommonApiMe(authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCommonApiMe(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserMeApi.getApiCommonApiMe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 我的节点列表
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCommonApiNodes(authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserUserNode>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCommonApiNodes(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserMeApi.getApiCommonApiNodes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 信用卡列表
         * @param {number} [page] 页数，默认1
         * @param {number} [perPage] 每页条数，默认15，最大200
         * @param {string} [number] 卡号
         * @param {string} [withAll] 获取所有数据
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiStudentApiMeCards(page?: number, perPage?: number, number?: string, withAll?: string, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserUserCard>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiStudentApiMeCards(page, perPage, number, withAll, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserMeApi.getApiStudentApiMeCards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 更新我的资料
         * @param {string} [authorization] 授权
         * @param {PatchApiCommonApiMeRequest} [patchApiCommonApiMeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiCommonApiMe(authorization?: string, patchApiCommonApiMeRequest?: PatchApiCommonApiMeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiCommonApiMe(authorization, patchApiCommonApiMeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserMeApi.patchApiCommonApiMe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 更新信用卡
         * @param {string} cardId 
         * @param {string} [authorization] 授权
         * @param {PostApiStudentApiMeCardsRequest} [postApiStudentApiMeCardsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiStudentApiMeCard(cardId: string, authorization?: string, postApiStudentApiMeCardsRequest?: PostApiStudentApiMeCardsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiStudentApiMeCard(cardId, authorization, postApiStudentApiMeCardsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserMeApi.patchApiStudentApiMeCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 创建信用卡
         * @param {string} [authorization] 授权
         * @param {PostApiStudentApiMeCardsRequest} [postApiStudentApiMeCardsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStudentApiMeCards(authorization?: string, postApiStudentApiMeCardsRequest?: PostApiStudentApiMeCardsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStudentApiMeCards(authorization, postApiStudentApiMeCardsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserMeApi.postApiStudentApiMeCards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserMeApi - factory interface
 * @export
 */
export const UserMeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserMeApiFp(configuration)
    return {
        /**
         * 
         * @summary 删除信用卡
         * @param {UserMeApiDeleteApiStudentApiMeCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiStudentApiMeCard(requestParameters: UserMeApiDeleteApiStudentApiMeCardRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteApiStudentApiMeCard(requestParameters.cardId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 我的资料
         * @param {UserMeApiGetApiCommonApiMeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCommonApiMe(requestParameters: UserMeApiGetApiCommonApiMeRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<UserUser> {
            return localVarFp.getApiCommonApiMe(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 我的节点列表
         * @param {UserMeApiGetApiCommonApiNodesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCommonApiNodes(requestParameters: UserMeApiGetApiCommonApiNodesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserUserNode>> {
            return localVarFp.getApiCommonApiNodes(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 信用卡列表
         * @param {UserMeApiGetApiStudentApiMeCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStudentApiMeCards(requestParameters: UserMeApiGetApiStudentApiMeCardsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserUserCard>> {
            return localVarFp.getApiStudentApiMeCards(requestParameters.page, requestParameters.perPage, requestParameters.number, requestParameters.withAll, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新我的资料
         * @param {UserMeApiPatchApiCommonApiMeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiCommonApiMe(requestParameters: UserMeApiPatchApiCommonApiMeRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<UserUser> {
            return localVarFp.patchApiCommonApiMe(requestParameters.authorization, requestParameters.patchApiCommonApiMeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新信用卡
         * @param {UserMeApiPatchApiStudentApiMeCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiStudentApiMeCard(requestParameters: UserMeApiPatchApiStudentApiMeCardRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.patchApiStudentApiMeCard(requestParameters.cardId, requestParameters.authorization, requestParameters.postApiStudentApiMeCardsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建信用卡
         * @param {UserMeApiPostApiStudentApiMeCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStudentApiMeCards(requestParameters: UserMeApiPostApiStudentApiMeCardsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.postApiStudentApiMeCards(requestParameters.authorization, requestParameters.postApiStudentApiMeCardsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteApiStudentApiMeCard operation in UserMeApi.
 * @export
 * @interface UserMeApiDeleteApiStudentApiMeCardRequest
 */
export interface UserMeApiDeleteApiStudentApiMeCardRequest {
    /**
     * 
     * @type {number}
     * @memberof UserMeApiDeleteApiStudentApiMeCard
     */
    readonly cardId: number

    /**
     * 授权
     * @type {string}
     * @memberof UserMeApiDeleteApiStudentApiMeCard
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiCommonApiMe operation in UserMeApi.
 * @export
 * @interface UserMeApiGetApiCommonApiMeRequest
 */
export interface UserMeApiGetApiCommonApiMeRequest {
    /**
     * 授权
     * @type {string}
     * @memberof UserMeApiGetApiCommonApiMe
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiCommonApiNodes operation in UserMeApi.
 * @export
 * @interface UserMeApiGetApiCommonApiNodesRequest
 */
export interface UserMeApiGetApiCommonApiNodesRequest {
    /**
     * 授权
     * @type {string}
     * @memberof UserMeApiGetApiCommonApiNodes
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiStudentApiMeCards operation in UserMeApi.
 * @export
 * @interface UserMeApiGetApiStudentApiMeCardsRequest
 */
export interface UserMeApiGetApiStudentApiMeCardsRequest {
    /**
     * 页数，默认1
     * @type {number}
     * @memberof UserMeApiGetApiStudentApiMeCards
     */
    readonly page?: number

    /**
     * 每页条数，默认15，最大200
     * @type {number}
     * @memberof UserMeApiGetApiStudentApiMeCards
     */
    readonly perPage?: number

    /**
     * 卡号
     * @type {string}
     * @memberof UserMeApiGetApiStudentApiMeCards
     */
    readonly number?: string

    /**
     * 获取所有数据
     * @type {string}
     * @memberof UserMeApiGetApiStudentApiMeCards
     */
    readonly withAll?: string

    /**
     * 授权
     * @type {string}
     * @memberof UserMeApiGetApiStudentApiMeCards
     */
    readonly authorization?: string
}

/**
 * Request parameters for patchApiCommonApiMe operation in UserMeApi.
 * @export
 * @interface UserMeApiPatchApiCommonApiMeRequest
 */
export interface UserMeApiPatchApiCommonApiMeRequest {
    /**
     * 授权
     * @type {string}
     * @memberof UserMeApiPatchApiCommonApiMe
     */
    readonly authorization?: string

    /**
     * 
     * @type {PatchApiCommonApiMeRequest}
     * @memberof UserMeApiPatchApiCommonApiMe
     */
    readonly patchApiCommonApiMeRequest?: PatchApiCommonApiMeRequest
}

/**
 * Request parameters for patchApiStudentApiMeCard operation in UserMeApi.
 * @export
 * @interface UserMeApiPatchApiStudentApiMeCardRequest
 */
export interface UserMeApiPatchApiStudentApiMeCardRequest {
    /**
     * 
     * @type {string}
     * @memberof UserMeApiPatchApiStudentApiMeCard
     */
    readonly cardId: string

    /**
     * 授权
     * @type {string}
     * @memberof UserMeApiPatchApiStudentApiMeCard
     */
    readonly authorization?: string

    /**
     * 
     * @type {PostApiStudentApiMeCardsRequest}
     * @memberof UserMeApiPatchApiStudentApiMeCard
     */
    readonly postApiStudentApiMeCardsRequest?: PostApiStudentApiMeCardsRequest
}

/**
 * Request parameters for postApiStudentApiMeCards operation in UserMeApi.
 * @export
 * @interface UserMeApiPostApiStudentApiMeCardsRequest
 */
export interface UserMeApiPostApiStudentApiMeCardsRequest {
    /**
     * 授权
     * @type {string}
     * @memberof UserMeApiPostApiStudentApiMeCards
     */
    readonly authorization?: string

    /**
     * 
     * @type {PostApiStudentApiMeCardsRequest}
     * @memberof UserMeApiPostApiStudentApiMeCards
     */
    readonly postApiStudentApiMeCardsRequest?: PostApiStudentApiMeCardsRequest
}

/**
 * UserMeApi - object-oriented interface
 * @export
 * @class UserMeApi
 * @extends {BaseAPI}
 */
export class UserMeApi extends BaseAPI {
    /**
     * 
     * @summary 删除信用卡
     * @param {UserMeApiDeleteApiStudentApiMeCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserMeApi
     */
    public deleteApiStudentApiMeCard(requestParameters: UserMeApiDeleteApiStudentApiMeCardRequest, options?: RawAxiosRequestConfig) {
        return UserMeApiFp(this.configuration).deleteApiStudentApiMeCard(requestParameters.cardId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 我的资料
     * @param {UserMeApiGetApiCommonApiMeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserMeApi
     */
    public getApiCommonApiMe(requestParameters: UserMeApiGetApiCommonApiMeRequest = {}, options?: RawAxiosRequestConfig) {
        return UserMeApiFp(this.configuration).getApiCommonApiMe(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 我的节点列表
     * @param {UserMeApiGetApiCommonApiNodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserMeApi
     */
    public getApiCommonApiNodes(requestParameters: UserMeApiGetApiCommonApiNodesRequest = {}, options?: RawAxiosRequestConfig) {
        return UserMeApiFp(this.configuration).getApiCommonApiNodes(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 信用卡列表
     * @param {UserMeApiGetApiStudentApiMeCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserMeApi
     */
    public getApiStudentApiMeCards(requestParameters: UserMeApiGetApiStudentApiMeCardsRequest = {}, options?: RawAxiosRequestConfig) {
        return UserMeApiFp(this.configuration).getApiStudentApiMeCards(requestParameters.page, requestParameters.perPage, requestParameters.number, requestParameters.withAll, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新我的资料
     * @param {UserMeApiPatchApiCommonApiMeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserMeApi
     */
    public patchApiCommonApiMe(requestParameters: UserMeApiPatchApiCommonApiMeRequest = {}, options?: RawAxiosRequestConfig) {
        return UserMeApiFp(this.configuration).patchApiCommonApiMe(requestParameters.authorization, requestParameters.patchApiCommonApiMeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新信用卡
     * @param {UserMeApiPatchApiStudentApiMeCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserMeApi
     */
    public patchApiStudentApiMeCard(requestParameters: UserMeApiPatchApiStudentApiMeCardRequest, options?: RawAxiosRequestConfig) {
        return UserMeApiFp(this.configuration).patchApiStudentApiMeCard(requestParameters.cardId, requestParameters.authorization, requestParameters.postApiStudentApiMeCardsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建信用卡
     * @param {UserMeApiPostApiStudentApiMeCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserMeApi
     */
    public postApiStudentApiMeCards(requestParameters: UserMeApiPostApiStudentApiMeCardsRequest = {}, options?: RawAxiosRequestConfig) {
        return UserMeApiFp(this.configuration).postApiStudentApiMeCards(requestParameters.authorization, requestParameters.postApiStudentApiMeCardsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

