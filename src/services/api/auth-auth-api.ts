/* tslint:disable */
/* eslint-disable */
/**
 * 学校
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AuthAuth } from '../model';
// @ts-ignore
import { PostApiCommonApiLoginRequest } from '../model';
/**
 * AuthAuthApi - axios parameter creator
 * @export
 */
export const AuthAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 退出登录
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiCommonApiLogin: async (authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/common-api/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 登录
         * @param {PostApiCommonApiLoginRequest} [postApiCommonApiLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCommonApiLogin: async (postApiCommonApiLoginRequest?: PostApiCommonApiLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/common-api/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiCommonApiLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthAuthApi - functional programming interface
 * @export
 */
export const AuthAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 退出登录
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiCommonApiLogin(authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiCommonApiLogin(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthAuthApi.deleteApiCommonApiLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 登录
         * @param {PostApiCommonApiLoginRequest} [postApiCommonApiLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCommonApiLogin(postApiCommonApiLoginRequest?: PostApiCommonApiLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAuth>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCommonApiLogin(postApiCommonApiLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthAuthApi.postApiCommonApiLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthAuthApi - factory interface
 * @export
 */
export const AuthAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthAuthApiFp(configuration)
    return {
        /**
         * 
         * @summary 退出登录
         * @param {AuthAuthApiDeleteApiCommonApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiCommonApiLogin(requestParameters: AuthAuthApiDeleteApiCommonApiLoginRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteApiCommonApiLogin(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 登录
         * @param {AuthAuthApiPostApiCommonApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCommonApiLogin(requestParameters: AuthAuthApiPostApiCommonApiLoginRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AuthAuth> {
            return localVarFp.postApiCommonApiLogin(requestParameters.postApiCommonApiLoginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteApiCommonApiLogin operation in AuthAuthApi.
 * @export
 * @interface AuthAuthApiDeleteApiCommonApiLoginRequest
 */
export interface AuthAuthApiDeleteApiCommonApiLoginRequest {
    /**
     * 授权
     * @type {string}
     * @memberof AuthAuthApiDeleteApiCommonApiLogin
     */
    readonly authorization?: string
}

/**
 * Request parameters for postApiCommonApiLogin operation in AuthAuthApi.
 * @export
 * @interface AuthAuthApiPostApiCommonApiLoginRequest
 */
export interface AuthAuthApiPostApiCommonApiLoginRequest {
    /**
     * 
     * @type {PostApiCommonApiLoginRequest}
     * @memberof AuthAuthApiPostApiCommonApiLogin
     */
    readonly postApiCommonApiLoginRequest?: PostApiCommonApiLoginRequest
}

/**
 * AuthAuthApi - object-oriented interface
 * @export
 * @class AuthAuthApi
 * @extends {BaseAPI}
 */
export class AuthAuthApi extends BaseAPI {
    /**
     * 
     * @summary 退出登录
     * @param {AuthAuthApiDeleteApiCommonApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAuthApi
     */
    public deleteApiCommonApiLogin(requestParameters: AuthAuthApiDeleteApiCommonApiLoginRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthAuthApiFp(this.configuration).deleteApiCommonApiLogin(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 登录
     * @param {AuthAuthApiPostApiCommonApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAuthApi
     */
    public postApiCommonApiLogin(requestParameters: AuthAuthApiPostApiCommonApiLoginRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthAuthApiFp(this.configuration).postApiCommonApiLogin(requestParameters.postApiCommonApiLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

