/* tslint:disable */
/* eslint-disable */
/**
 * 学校
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CourseCourseBill1 } from '../model';
// @ts-ignore
import { PatchApiTeacherApiCourseBillRequest } from '../model';
/**
 * CourseCourseBillApi - axios parameter creator
 * @export
 */
export const CourseCourseBillApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 账单-账单管理-账单删除
         * @param {number} courseBillId 
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiTeacherApiCourseBill: async (courseBillId: number, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseBillId' is not null or undefined
            assertParamExists('deleteApiTeacherApiCourseBill', 'courseBillId', courseBillId)
            const localVarPath = `/api/teacher-api/course-bills/{courseBillId}`
                .replace(`{${"courseBillId"}}`, encodeURIComponent(String(courseBillId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 账单-账单管理-账单详情
         * @param {number} courseBillId 
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTeacherApiCourseBill: async (courseBillId: number, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseBillId' is not null or undefined
            assertParamExists('getApiTeacherApiCourseBill', 'courseBillId', courseBillId)
            const localVarPath = `/api/teacher-api/course-bills/{courseBillId}`
                .replace(`{${"courseBillId"}}`, encodeURIComponent(String(courseBillId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 账单-账单管理-账单列表
         * @param {number} [page] 页数，默认1
         * @param {number} [perPage] 每页条数，默认15，最大200
         * @param {string} [status] 状态
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTeacherApiCourseBills: async (page?: number, perPage?: number, status?: string, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teacher-api/course-bills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 账单-账单管理-账单更新
         * @param {string} courseBillId 
         * @param {string} [authorization] 授权
         * @param {PatchApiTeacherApiCourseBillRequest} [patchApiTeacherApiCourseBillRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiTeacherApiCourseBill: async (courseBillId: string, authorization?: string, patchApiTeacherApiCourseBillRequest?: PatchApiTeacherApiCourseBillRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseBillId' is not null or undefined
            assertParamExists('patchApiTeacherApiCourseBill', 'courseBillId', courseBillId)
            const localVarPath = `/api/teacher-api/course-bills/{courseBillId}`
                .replace(`{${"courseBillId"}}`, encodeURIComponent(String(courseBillId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchApiTeacherApiCourseBillRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 账单-账单管理-发送账单
         * @param {string} courseBillId 
         * @param {string} [authorization] 授权
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiTeacherApiCourseBillSend: async (courseBillId: string, authorization?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseBillId' is not null or undefined
            assertParamExists('patchApiTeacherApiCourseBillSend', 'courseBillId', courseBillId)
            const localVarPath = `/api/teacher-api/course-bills/{courseBillId}/send`
                .replace(`{${"courseBillId"}}`, encodeURIComponent(String(courseBillId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 账单-账单管理-账单添加
         * @param {string} [authorization] 授权
         * @param {PatchApiTeacherApiCourseBillRequest} [patchApiTeacherApiCourseBillRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTeacherApiCourseBills: async (authorization?: string, patchApiTeacherApiCourseBillRequest?: PatchApiTeacherApiCourseBillRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teacher-api/course-bills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchApiTeacherApiCourseBillRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseCourseBillApi - functional programming interface
 * @export
 */
export const CourseCourseBillApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseCourseBillApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 账单-账单管理-账单删除
         * @param {number} courseBillId 
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiTeacherApiCourseBill(courseBillId: number, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiTeacherApiCourseBill(courseBillId, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseBillApi.deleteApiTeacherApiCourseBill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 账单-账单管理-账单详情
         * @param {number} courseBillId 
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiTeacherApiCourseBill(courseBillId: number, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCourseBill1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiTeacherApiCourseBill(courseBillId, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseBillApi.getApiTeacherApiCourseBill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 账单-账单管理-账单列表
         * @param {number} [page] 页数，默认1
         * @param {number} [perPage] 每页条数，默认15，最大200
         * @param {string} [status] 状态
         * @param {string} [authorization] 授权
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiTeacherApiCourseBills(page?: number, perPage?: number, status?: string, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseCourseBill1>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiTeacherApiCourseBills(page, perPage, status, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseBillApi.getApiTeacherApiCourseBills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 账单-账单管理-账单更新
         * @param {string} courseBillId 
         * @param {string} [authorization] 授权
         * @param {PatchApiTeacherApiCourseBillRequest} [patchApiTeacherApiCourseBillRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiTeacherApiCourseBill(courseBillId: string, authorization?: string, patchApiTeacherApiCourseBillRequest?: PatchApiTeacherApiCourseBillRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCourseBill1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiTeacherApiCourseBill(courseBillId, authorization, patchApiTeacherApiCourseBillRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseBillApi.patchApiTeacherApiCourseBill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 账单-账单管理-发送账单
         * @param {string} courseBillId 
         * @param {string} [authorization] 授权
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiTeacherApiCourseBillSend(courseBillId: string, authorization?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiTeacherApiCourseBillSend(courseBillId, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseBillApi.patchApiTeacherApiCourseBillSend']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 账单-账单管理-账单添加
         * @param {string} [authorization] 授权
         * @param {PatchApiTeacherApiCourseBillRequest} [patchApiTeacherApiCourseBillRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTeacherApiCourseBills(authorization?: string, patchApiTeacherApiCourseBillRequest?: PatchApiTeacherApiCourseBillRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseCourseBill1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTeacherApiCourseBills(authorization, patchApiTeacherApiCourseBillRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseCourseBillApi.postApiTeacherApiCourseBills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseCourseBillApi - factory interface
 * @export
 */
export const CourseCourseBillApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseCourseBillApiFp(configuration)
    return {
        /**
         * 
         * @summary 账单-账单管理-账单删除
         * @param {CourseCourseBillApiDeleteApiTeacherApiCourseBillRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiTeacherApiCourseBill(requestParameters: CourseCourseBillApiDeleteApiTeacherApiCourseBillRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteApiTeacherApiCourseBill(requestParameters.courseBillId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 账单-账单管理-账单详情
         * @param {CourseCourseBillApiGetApiTeacherApiCourseBillRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTeacherApiCourseBill(requestParameters: CourseCourseBillApiGetApiTeacherApiCourseBillRequest, options?: RawAxiosRequestConfig): AxiosPromise<CourseCourseBill1> {
            return localVarFp.getApiTeacherApiCourseBill(requestParameters.courseBillId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 账单-账单管理-账单列表
         * @param {CourseCourseBillApiGetApiTeacherApiCourseBillsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTeacherApiCourseBills(requestParameters: CourseCourseBillApiGetApiTeacherApiCourseBillsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseCourseBill1>> {
            return localVarFp.getApiTeacherApiCourseBills(requestParameters.page, requestParameters.perPage, requestParameters.status, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 账单-账单管理-账单更新
         * @param {CourseCourseBillApiPatchApiTeacherApiCourseBillRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiTeacherApiCourseBill(requestParameters: CourseCourseBillApiPatchApiTeacherApiCourseBillRequest, options?: RawAxiosRequestConfig): AxiosPromise<CourseCourseBill1> {
            return localVarFp.patchApiTeacherApiCourseBill(requestParameters.courseBillId, requestParameters.authorization, requestParameters.patchApiTeacherApiCourseBillRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 账单-账单管理-发送账单
         * @param {CourseCourseBillApiPatchApiTeacherApiCourseBillSendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiTeacherApiCourseBillSend(requestParameters: CourseCourseBillApiPatchApiTeacherApiCourseBillSendRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.patchApiTeacherApiCourseBillSend(requestParameters.courseBillId, requestParameters.authorization, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 账单-账单管理-账单添加
         * @param {CourseCourseBillApiPostApiTeacherApiCourseBillsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTeacherApiCourseBills(requestParameters: CourseCourseBillApiPostApiTeacherApiCourseBillsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CourseCourseBill1> {
            return localVarFp.postApiTeacherApiCourseBills(requestParameters.authorization, requestParameters.patchApiTeacherApiCourseBillRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteApiTeacherApiCourseBill operation in CourseCourseBillApi.
 * @export
 * @interface CourseCourseBillApiDeleteApiTeacherApiCourseBillRequest
 */
export interface CourseCourseBillApiDeleteApiTeacherApiCourseBillRequest {
    /**
     * 
     * @type {number}
     * @memberof CourseCourseBillApiDeleteApiTeacherApiCourseBill
     */
    readonly courseBillId: number

    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseBillApiDeleteApiTeacherApiCourseBill
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiTeacherApiCourseBill operation in CourseCourseBillApi.
 * @export
 * @interface CourseCourseBillApiGetApiTeacherApiCourseBillRequest
 */
export interface CourseCourseBillApiGetApiTeacherApiCourseBillRequest {
    /**
     * 
     * @type {number}
     * @memberof CourseCourseBillApiGetApiTeacherApiCourseBill
     */
    readonly courseBillId: number

    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseBillApiGetApiTeacherApiCourseBill
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiTeacherApiCourseBills operation in CourseCourseBillApi.
 * @export
 * @interface CourseCourseBillApiGetApiTeacherApiCourseBillsRequest
 */
export interface CourseCourseBillApiGetApiTeacherApiCourseBillsRequest {
    /**
     * 页数，默认1
     * @type {number}
     * @memberof CourseCourseBillApiGetApiTeacherApiCourseBills
     */
    readonly page?: number

    /**
     * 每页条数，默认15，最大200
     * @type {number}
     * @memberof CourseCourseBillApiGetApiTeacherApiCourseBills
     */
    readonly perPage?: number

    /**
     * 状态
     * @type {string}
     * @memberof CourseCourseBillApiGetApiTeacherApiCourseBills
     */
    readonly status?: string

    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseBillApiGetApiTeacherApiCourseBills
     */
    readonly authorization?: string
}

/**
 * Request parameters for patchApiTeacherApiCourseBill operation in CourseCourseBillApi.
 * @export
 * @interface CourseCourseBillApiPatchApiTeacherApiCourseBillRequest
 */
export interface CourseCourseBillApiPatchApiTeacherApiCourseBillRequest {
    /**
     * 
     * @type {string}
     * @memberof CourseCourseBillApiPatchApiTeacherApiCourseBill
     */
    readonly courseBillId: string

    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseBillApiPatchApiTeacherApiCourseBill
     */
    readonly authorization?: string

    /**
     * 
     * @type {PatchApiTeacherApiCourseBillRequest}
     * @memberof CourseCourseBillApiPatchApiTeacherApiCourseBill
     */
    readonly patchApiTeacherApiCourseBillRequest?: PatchApiTeacherApiCourseBillRequest
}

/**
 * Request parameters for patchApiTeacherApiCourseBillSend operation in CourseCourseBillApi.
 * @export
 * @interface CourseCourseBillApiPatchApiTeacherApiCourseBillSendRequest
 */
export interface CourseCourseBillApiPatchApiTeacherApiCourseBillSendRequest {
    /**
     * 
     * @type {string}
     * @memberof CourseCourseBillApiPatchApiTeacherApiCourseBillSend
     */
    readonly courseBillId: string

    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseBillApiPatchApiTeacherApiCourseBillSend
     */
    readonly authorization?: string

    /**
     * 
     * @type {object}
     * @memberof CourseCourseBillApiPatchApiTeacherApiCourseBillSend
     */
    readonly body?: object
}

/**
 * Request parameters for postApiTeacherApiCourseBills operation in CourseCourseBillApi.
 * @export
 * @interface CourseCourseBillApiPostApiTeacherApiCourseBillsRequest
 */
export interface CourseCourseBillApiPostApiTeacherApiCourseBillsRequest {
    /**
     * 授权
     * @type {string}
     * @memberof CourseCourseBillApiPostApiTeacherApiCourseBills
     */
    readonly authorization?: string

    /**
     * 
     * @type {PatchApiTeacherApiCourseBillRequest}
     * @memberof CourseCourseBillApiPostApiTeacherApiCourseBills
     */
    readonly patchApiTeacherApiCourseBillRequest?: PatchApiTeacherApiCourseBillRequest
}

/**
 * CourseCourseBillApi - object-oriented interface
 * @export
 * @class CourseCourseBillApi
 * @extends {BaseAPI}
 */
export class CourseCourseBillApi extends BaseAPI {
    /**
     * 
     * @summary 账单-账单管理-账单删除
     * @param {CourseCourseBillApiDeleteApiTeacherApiCourseBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseBillApi
     */
    public deleteApiTeacherApiCourseBill(requestParameters: CourseCourseBillApiDeleteApiTeacherApiCourseBillRequest, options?: RawAxiosRequestConfig) {
        return CourseCourseBillApiFp(this.configuration).deleteApiTeacherApiCourseBill(requestParameters.courseBillId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 账单-账单管理-账单详情
     * @param {CourseCourseBillApiGetApiTeacherApiCourseBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseBillApi
     */
    public getApiTeacherApiCourseBill(requestParameters: CourseCourseBillApiGetApiTeacherApiCourseBillRequest, options?: RawAxiosRequestConfig) {
        return CourseCourseBillApiFp(this.configuration).getApiTeacherApiCourseBill(requestParameters.courseBillId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 账单-账单管理-账单列表
     * @param {CourseCourseBillApiGetApiTeacherApiCourseBillsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseBillApi
     */
    public getApiTeacherApiCourseBills(requestParameters: CourseCourseBillApiGetApiTeacherApiCourseBillsRequest = {}, options?: RawAxiosRequestConfig) {
        return CourseCourseBillApiFp(this.configuration).getApiTeacherApiCourseBills(requestParameters.page, requestParameters.perPage, requestParameters.status, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 账单-账单管理-账单更新
     * @param {CourseCourseBillApiPatchApiTeacherApiCourseBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseBillApi
     */
    public patchApiTeacherApiCourseBill(requestParameters: CourseCourseBillApiPatchApiTeacherApiCourseBillRequest, options?: RawAxiosRequestConfig) {
        return CourseCourseBillApiFp(this.configuration).patchApiTeacherApiCourseBill(requestParameters.courseBillId, requestParameters.authorization, requestParameters.patchApiTeacherApiCourseBillRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 账单-账单管理-发送账单
     * @param {CourseCourseBillApiPatchApiTeacherApiCourseBillSendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseBillApi
     */
    public patchApiTeacherApiCourseBillSend(requestParameters: CourseCourseBillApiPatchApiTeacherApiCourseBillSendRequest, options?: RawAxiosRequestConfig) {
        return CourseCourseBillApiFp(this.configuration).patchApiTeacherApiCourseBillSend(requestParameters.courseBillId, requestParameters.authorization, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 账单-账单管理-账单添加
     * @param {CourseCourseBillApiPostApiTeacherApiCourseBillsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCourseBillApi
     */
    public postApiTeacherApiCourseBills(requestParameters: CourseCourseBillApiPostApiTeacherApiCourseBillsRequest = {}, options?: RawAxiosRequestConfig) {
        return CourseCourseBillApiFp(this.configuration).postApiTeacherApiCourseBills(requestParameters.authorization, requestParameters.patchApiTeacherApiCourseBillRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

